import os
from telethon import TelegramClient, events, types, Button
from telethon.tl import functions, types
from telethon.network import ConnectionTcpFull
import asyncio
import logging
import json
import time
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = "*************"
API_HASH = "***********"
BOT_TOKEN = "***********"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
SETTINGS_FILE = "monitor_settings.json"

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
AVAILABLE_REACTIONS = {
    "üëÄ": "–ì–ª–∞–∑–∞",
    "üëç": "–õ–∞–π–∫", 
    "‚ù§Ô∏è": "–°–µ—Ä–¥—Ü–µ",
    "üî•": "–û–≥–æ–Ω—å",
    "üéâ": "–ü—Ä–∞–∑–¥–Ω–∏–∫",
    "üòÅ": "–£–ª—ã–±–∫–∞",
    "üòÆ": "–£–¥–∏–≤–ª–µ–Ω–∏–µ",
    "üò¢": "–ì—Ä—É—Å—Ç—å",
    "ü§î": "–î—É–º–∞—é",
    "üëé": "–î–∏–∑–ª–∞–π–∫"
}

class MessageMonitor:
    def __init__(self):
        self.client = None
        self.bot = None
        self.monitored_groups = {}  # –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        self.owner_id = None
        self.search_query = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.page_size = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        self.processed_messages = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.entity_cache = {}  # –ö—ç—à –¥–ª—è entity, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ API-–∑–∞–ø—Ä–æ—Å–æ–≤
        self.reaction_selection_state = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∞–∫—Ü–∏–∏
        self.load_settings()

    def load_settings(self):
        if os.path.exists(SETTINGS_FILE):
            try:
                with open(SETTINGS_FILE, "r") as f:
                    data = json.load(f)
                    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ ID)
                    if isinstance(data, dict) and all(isinstance(v, bool) for v in data.values()):
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –Ω–æ–≤—ã–π
                        self.monitored_groups = {
                            group_id: {"enabled": True, "reaction": "üëÄ"}
                            for group_id in data
                        }
                        self.save_settings()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    else:
                        self.monitored_groups = data
                logger.info(
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è {len(self.monitored_groups)} –≥—Ä—É–ø–ø"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
                self.monitored_groups = {}

    def save_settings(self):
        try:
            with open(SETTINGS_FILE, "w") as f:
                json.dump(self.monitored_groups, f, ensure_ascii=False, indent=2)
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö
            with open(f"{SETTINGS_FILE}.backup", "w") as f:
                json.dump(self.monitored_groups, f, ensure_ascii=False, indent=2)
            logger.info(
                f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è {len(self.monitored_groups)} –≥—Ä—É–ø–ø"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def normalize_group_id(self, group_id):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç ID –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏"""
        # –ï—Å–ª–∏ ID —É–∂–µ —Å—Ç—Ä–æ–∫–∞, —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–µ–π, –∏–Ω–∞—á–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
        str_id = str(group_id)

        # –§–æ—Ä–º–∞—Ç: -100... (–ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
        if str_id.startswith("-100"):
            return str_id

        # –§–æ—Ä–º–∞—Ç: -... (–∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç —Å –º–∏–Ω—É—Å–æ–º)
        if str_id.startswith("-"):
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å -100 –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            return f"-100{str_id[1:]}"

        # –§–æ—Ä–º–∞—Ç: —á–∏—Å–ª–æ –±–µ–∑ –º–∏–Ω—É—Å–∞
        return f"-100{str_id}"

    def is_group_monitored(self, group_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –≥—Ä—É–ø–ø–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ID)"""
        str_id = str(group_id)

        # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ID
        formats = [
            str_id,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            str_id.replace("-100", "-"),  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç (–±–µ–∑ 100)
            f"-100{str_id[1:]}"
            if str_id.startswith("-")
            else f"-100{str_id}",  # –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        for id_format in formats:
            if id_format in self.monitored_groups:
                return True, id_format

        return False, None

    def get_group_reaction(self, group_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        is_monitored, monitor_id = self.is_group_monitored(group_id)
        if is_monitored and monitor_id:
            group_settings = self.monitored_groups.get(monitor_id, {})
            if isinstance(group_settings, dict):
                return group_settings.get("reaction", "üëÄ")
        return "üëÄ"  # –†–µ–∞–∫—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    async def get_entity_safely(self, chat_id, max_retries=3):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç entity —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = str(chat_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
        if cache_key in self.entity_cache:
            entity = self.entity_cache[cache_key]
            if (
                time.time() - entity["timestamp"] < 3600
            ):  # –ö—ç—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
                logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ entity –¥–ª—è {chat_id}")
                return entity["data"]

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ID
        formats_to_try = [
            chat_id,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            int(chat_id)
            if isinstance(chat_id, str) and chat_id.lstrip("-").isdigit()
            else chat_id,  # –ö–∞–∫ —á–∏—Å–ª–æ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            int(chat_id.replace("-100", "-"))
            if isinstance(chat_id, str) and chat_id.startswith("-100") and chat_id[4:].isdigit()
            else chat_id,  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
        ]

        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å entity —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
        last_error = None
        for attempt in range(max_retries):
            for id_format in formats_to_try:
                try:
                    entity = await self.client.get_entity(id_format)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                    self.entity_cache[cache_key] = {
                        "data": entity,
                        "timestamp": time.time(),
                    }
                    logger.info(
                        f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω entity –¥–ª—è {chat_id} (—Ñ–æ—Ä–º–∞—Ç: {id_format})"
                    )
                    return entity
                except Exception as e:
                    last_error = e
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è {id_format}: {e}")

            # –ï—Å–ª–∏ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∂–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            if attempt < max_retries - 1:
                retry_delay = (attempt + 1) * 2  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                logger.info(
                    f"–û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è entity"
                )
                await asyncio.sleep(retry_delay)

        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
        logger.error(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è {chat_id} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {last_error}"
        )
        return None

    async def delayed_reaction(self, event, chat_id):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            message_id = event.message.id
            message_key = f"{chat_id}_{message_id}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message_key in self.processed_messages:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_key} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
            self.processed_messages.add(message_key)

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø—ã
            reaction = self.get_group_reaction(chat_id)

            # –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã
            logger.info(
                f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è '{reaction}' –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}, id {message_id} —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã"
            )
            await asyncio.sleep(120)

            logger.info(
                f"–ü—Ä–æ—à–ª–æ 2 –º–∏–Ω—É—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é '{reaction}' –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message_id} –≤ —á–∞—Ç–µ {chat_id}"
            )

            # –ü–æ–ª—É—á–∞–µ–º entity –∑–∞—Ä–∞–Ω–µ–µ
            entity = await self.get_entity_safely(chat_id)
            if not entity:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç {chat_id} –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏")
                # –£–¥–∞–ª—è–µ–º –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –µ—Å–ª–∏ —á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                if str(chat_id) in self.monitored_groups or any(
                    fmt in self.monitored_groups 
                    for fmt in [str(chat_id), str(chat_id).replace("-100", "-"), f"-100{str(chat_id)[1:]}" if str(chat_id).startswith("-") else f"-100{str(chat_id)}"]
                ):
                    await self.stop_monitoring(chat_id)
                    logger.info(
                        f"–ß–∞—Ç {chat_id} —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    )
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    try:
                        await self.bot.send_message(
                            self.owner_id,
                            f"‚ö†Ô∏è –ß–∞—Ç —Å ID {chat_id} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.",
                        )
                    except Exception as notify_error:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞: {notify_error}")

                self.processed_messages.remove(message_key)
                return

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
            success = False

            # –ú–µ—Ç–æ–¥ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π API –≤—ã–∑–æ–≤
            try:
                await self.client(
                    functions.messages.SendReactionRequest(
                        peer=entity,
                        msg_id=message_id,
                        reaction=[types.ReactionEmoji(emoticon=reaction)],
                        big=False
                    )
                )
                logger.info(
                    f"‚úÖ –†–µ–∞–∫—Ü–∏—è '{reaction}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message_id}"
                )
                success = True
            except Exception as e1:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: {str(e1)}")

            if not success:
                logger.error(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message_id}"
                )
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                self.processed_messages.remove(message_key)

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –±–æ–ª–µ–µ 1000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if len(self.processed_messages) > 1000:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000
                sorted_messages = sorted(list(self.processed_messages))
                self.processed_messages = set(sorted_messages[-1000:])

        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ delayed_reaction: {str(e)}")
            # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if message_key in self.processed_messages:
                self.processed_messages.remove(message_key)

    async def validate_monitored_groups(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø"""
        groups_to_remove = []

        for group_id in self.monitored_groups:
            try:
                entity = await self.get_entity_safely(group_id)
                if not entity:
                    logger.warning(
                        f"–ì—Ä—É–ø–ø–∞ {group_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
                    )
                    groups_to_remove.append(group_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã {group_id}: {e}")
                groups_to_remove.append(group_id)

        # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        for group_id in groups_to_remove:
            await self.stop_monitoring(group_id)

        if groups_to_remove:
            logger.info(
                f"–£–¥–∞–ª–µ–Ω–æ {len(groups_to_remove)} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
            try:
                if self.owner_id and groups_to_remove:
                    message = f"‚ö†Ô∏è {len(groups_to_remove)} –≥—Ä—É–ø–ø –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:\n"
                    for group_id in groups_to_remove[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                        message += f"- {group_id}\n"
                    if len(groups_to_remove) > 10:
                        message += f"...–∏ –µ—â–µ {len(groups_to_remove) - 10} –≥—Ä—É–ø–ø"

                    await self.bot.send_message(self.owner_id, message)
            except Exception as notify_error:
                logger.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö: {notify_error}"
                )

    async def get_unique_groups(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        try:
            dialogs = []
            seen_ids = set()

            async for dialog in self.client.iter_dialogs():
                if isinstance(dialog.entity, (types.Channel, types.Chat)):
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                    if dialog.entity.id not in seen_ids:
                        seen_ids.add(dialog.entity.id)
                        dialogs.append(dialog.entity)

            return dialogs

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
            return []

    async def get_groups(self, search_query=None):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–æ–º"""
        groups = await self.get_unique_groups()

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≥—Ä—É–ø–ø—ã
        if search_query:
            search_query = search_query.lower()
            filtered_groups = []
            for group in groups:
                if hasattr(group, "title") and search_query in group.title.lower():
                    filtered_groups.append(group)
            return filtered_groups

        return groups

    async def get_paginated_groups(self, page=0, search_query=None):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥—Ä—É–ø–ø—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        groups = await self.get_groups(search_query)

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_pages = (len(groups) - 1) // self.page_size + 1 if groups else 1

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
        page = max(0, min(page, total_pages - 1)) if total_pages > 0 else 0

        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = page * self.page_size
        end_idx = min(start_idx + self.page_size, len(groups))
        page_groups = groups[start_idx:end_idx] if groups else []

        return page_groups, page, total_pages

    async def start(self):
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            self.client = TelegramClient(
                "user_session",
                API_ID,
                API_HASH,
                device_model="Desktop",
                system_version="Windows 10",
                app_version="1.0",
                lang_code="ru",
                system_lang_code="ru",
                connection_retries=10,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                retry_delay=2,  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                timeout=60,  # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç
                connection=ConnectionTcpFull,
                sequential_updates=True,
                auto_reconnect=True,
            )

            if os.path.exists("user_session.session"):
                logger.info("–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏")
            else:
                logger.warning("–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

            await self.client.start()
            logger.info("–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")

            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                self.owner_id = me.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
                logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ {me.first_name} (ID: {me.id})")
            else:
                logger.error("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
                return

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
            return

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
            self.bot = TelegramClient(
                "bot_session",
                API_ID,
                API_HASH,
                device_model="Desktop",
                system_version="Windows 10",
                app_version="1.0",
                lang_code="ru",
                system_lang_code="ru",
                connection_retries=10,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                retry_delay=2,  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                timeout=60,  # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç
                connection=ConnectionTcpFull,
                sequential_updates=True,
                auto_reconnect=True,
            )

            await self.bot.start(bot_token=BOT_TOKEN)
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            await self.setup_handlers()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
            await self.validate_monitored_groups()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
            return

    async def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π"""

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        @self.bot.on(events.NewMessage())
        async def check_access(event):
            if event.sender_id != self.owner_id:
                await event.respond(
                    "‚õîÔ∏è –≠—Ç–æ—Ç –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞."
                )
                logger.warning(
                    f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.sender_id}"
                )
                return

            if hasattr(event, "message") and hasattr(event.message, "text"):
                text = event.message.text
                if text == "/start":
                    await self.send_main_menu(event)
                elif text == "üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø":
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
                    self.search_query[event.chat_id] = None
                    await self.show_groups_list(event, page=0)
                elif text == "üîç –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø":
                    await event.respond(
                        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã:", buttons=Button.force_reply()
                    )
                elif text == "üîç –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏":
                    await self.show_active_monitors(event)
                elif text == "‚ùì –ü–æ–º–æ—â—å":
                    await self.show_help(event)
                elif text == "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å":
                    await event.respond("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø...")
                    await self.validate_monitored_groups()
                    await event.respond(
                        "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
                    )
                elif text.startswith("üîç –ü–æ–∏—Å–∫: "):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    search_text = text[len("üîç –ü–æ–∏—Å–∫: ") :]
                    self.search_query[event.chat_id] = search_text
                    await self.show_groups_list(event, page=0, search=search_text)
                elif event.message.is_reply and hasattr(
                    event.message.reply_to, "reply_to_msg_id"
                ):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
                    try:
                        orig_msg = await event.get_reply_message()
                        if (
                            orig_msg
                            and orig_msg.text == "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã:"
                        ):
                            search_text = event.message.text
                            self.search_query[event.chat_id] = search_text
                            await self.show_groups_list(
                                event, page=0, search=search_text
                            )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–æ–∫)
        @self.bot.on(events.CallbackQuery())
        async def handle_callback(event):
            if event.sender_id != self.owner_id:
                await event.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", alert=True)
                return

            try:
                data = event.data.decode()

                if data == "main_menu":
                    await self.send_main_menu(event)
                elif data.startswith("page_"):
                    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
                    page = int(data.split("_")[1])
                    search = self.search_query.get(event.chat_id)
                    await self.show_groups_list(
                        event, page=page, search=search, edit=True
                    )
                elif data.startswith("toggle_"):
                    # –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã
                    await self.toggle_group_monitoring(event, data)
                elif data.startswith("reaction_"):
                    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã
                    group_id = data.split("_", 1)[1]
                    await self.show_reaction_menu(event, group_id)
                elif data.startswith("setreaction_"):
                    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏
                    parts = data.split("_", 2)
                    reaction = parts[1]
                    group_id = parts[2]
                    await self.set_group_reaction(event, group_id, reaction)
                elif data == "search_groups":
                    # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø
                    await event.answer(
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
                    )
                elif data.startswith("mon_page_"):
                    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤
                    page = int(data.split("_")[2])
                    await self.show_active_monitors(event, page=page, edit=True)
                elif data == "check_availability":
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø
                    await event.answer("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø...")
                    await self.validate_monitored_groups()
                    try:
                        await event.edit(
                            "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
                        )
                    except:
                        await event.respond(
                            "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
                        )
                elif data == "dummy":
                    # –ü—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                    await event.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞")
                else:
                    await event.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {e}")
                try:
                    await event.answer(
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã", alert=True
                    )
                except:
                    pass

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
        @self.client.on(events.NewMessage())
        async def monitor_messages(event):
            try:
                chat_id = str(event.chat_id)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–π —á–∞—Ç
                is_monitored, monitor_id = self.is_group_monitored(chat_id)

                if is_monitored:
                    logger.info(
                        f"–ß–∞—Ç {chat_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö (ID: {monitor_id})"
                    )

                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
                        me = await self.client.get_me()
                        logger.info(
                            f"ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {event.sender_id}, –Ω–∞—à ID: {me.id}"
                        )

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –Ω–∞—Å
                        if event.sender_id != me.id:
                            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º entity
                            entity = await self.get_entity_safely(chat_id)

                            if not entity:
                                logger.error(
                                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è —á–∞—Ç–∞ {chat_id}"
                                )
                                return

                            # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                            try:
                                await self.client.send_read_acknowledge(
                                    entity, event.message, clear_mentions=True
                                )
                                logger.info(
                                    f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {event.message.id} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"
                                )
                            except Exception as read_error:
                                logger.error(
                                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {event.message.id} –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ: {str(read_error)}"
                                )

                            # –°—Ç–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
                            logger.info(
                                f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏"
                            )

                            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é
                            asyncio.create_task(self.delayed_reaction(event, chat_id))
                        else:
                            logger.info(
                                f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {event.message.id}"
                            )
                    except Exception as e:
                        logger.error(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {event.message.id}: {str(e)}"
                        )
                else:
                    logger.info(f"–ß–∞—Ç {chat_id} –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")

    async def show_reaction_menu(self, event, group_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        buttons = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        for reaction, name in AVAILABLE_REACTIONS.items():
            current_reaction = self.get_group_reaction(group_id)
            # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–∞–∫—Ü–∏—é
            prefix = "‚úÖ " if reaction == current_reaction else ""
            buttons.append([
                Button.inline(f"{prefix}{reaction} {name}", f"setreaction_{reaction}_{group_id}")
            ])
        
        buttons.append([Button.inline("üîô –ù–∞–∑–∞–¥", f"toggle_{group_id}")])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        entity = await self.get_entity_safely(group_id)
        group_name = entity.title if entity and hasattr(entity, "title") else f"–ì—Ä—É–ø–ø–∞ {group_id}"
        
        message = f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø—ã '{group_name}':"
        
        try:
            await event.edit(message, buttons=buttons)
        except:
            await event.respond(message, buttons=buttons)

    async def set_group_reaction(self, event, group_id, reaction):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        is_monitored, monitor_id = self.is_group_monitored(group_id)
        
        if is_monitored and monitor_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
            if isinstance(self.monitored_groups[monitor_id], dict):
                self.monitored_groups[monitor_id]["reaction"] = reaction
            else:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                self.monitored_groups[monitor_id] = {"enabled": True, "reaction": reaction}
            
            self.save_settings()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            entity = await self.get_entity_safely(group_id)
            group_name = entity.title if entity and hasattr(entity, "title") else f"–ì—Ä—É–ø–ø–∞ {group_id}"
            
            await event.answer(f"‚úÖ –†–µ–∞–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã '{group_name}' –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {reaction}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø
            search = self.search_query.get(event.chat_id)
            await self.show_groups_list(event, page=0, search=search, edit=True)
        else:
            await event.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", alert=True)

    async def send_main_menu(self, event):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
        keyboard = [
            [Button.text("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")],
            [Button.text("üîç –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø")],
            [Button.text("üîç –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏")],
            [Button.text("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å")],
            [Button.text("‚ùì –ü–æ–º–æ—â—å")],
        ]

        try:
            if hasattr(event, "edit") and callable(event.edit):
                try:
                    await event.edit("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", buttons=keyboard)
                except Exception:
                    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", buttons=keyboard)
            else:
                await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", buttons=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é: {e}")
            try:
                await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", buttons=keyboard)
            except:
                pass

    async def show_groups_list(self, event, page=0, search=None, edit=False):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø"""
        try:
            groups, current_page, total_pages = await self.get_paginated_groups(
                page, search
            )

            if not groups:
                message = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞."
                if search:
                    message = f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø."

                if edit and hasattr(event, "edit") and callable(event.edit):
                    try:
                        await event.edit(message)
                    except:
                        await event.respond(message)
                else:
                    await event.respond(message)
                return

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø
            buttons = []
            for group in groups:
                if hasattr(group, "id") and hasattr(group, "title"):
                    is_monitored, monitor_id = self.is_group_monitored(group.id)
                    status = "‚úÖ" if is_monitored else "‚≠ïÔ∏è"
                    reaction = self.get_group_reaction(group.id) if is_monitored else ""
                    button_text = f"{status} {group.title} {reaction}"
                    buttons.append([
                        Button.inline(button_text, f"toggle_{group.id}"),
                        Button.inline("‚öôÔ∏è", f"reaction_{group.id}") if is_monitored else None
                    ])
                    # –£–±–∏—Ä–∞–µ–º None –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
                    buttons[-1] = [btn for btn in buttons[-1] if btn is not None]

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            nav_buttons = []

            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            if current_page > 0:
                nav_buttons.append(Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", f"page_{current_page-1}"))

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            page_info = f"üìÑ {current_page+1}/{total_pages}"
            nav_buttons.append(Button.inline(page_info, "dummy"))

            # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
            if current_page < total_pages - 1:
                nav_buttons.append(Button.inline("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", f"page_{current_page+1}"))

            buttons.append(nav_buttons)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            search_info = f"üîç –ü–æ–∏—Å–∫: {search}" if search else "üîç –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø"
            buttons.append([Button.inline(search_info, "search_groups")])
            buttons.append([Button.inline("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")])

            message = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n‚öôÔ∏è - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏"
            if search:
                message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search}':\n‚öôÔ∏è - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏"

            if edit and hasattr(event, "edit") and callable(event.edit):
                try:
                    await event.edit(message, buttons=buttons)
                except:
                    await event.respond(message, buttons=buttons)
            else:
                await event.respond(message, buttons=buttons)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
            message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await event.respond(message)

    async def show_active_monitors(self, event, page=0, edit=False):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        if not self.monitored_groups:
            message = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤."
            if edit and hasattr(event, "edit") and callable(event.edit):
                try:
                    await event.edit(message)
                except:
                    await event.respond(message)
            else:
                await event.respond(message)
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø
            active_groups = []
            for group_id in self.monitored_groups:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º entity
                    entity = await self.get_entity_safely(group_id)

                    if entity and hasattr(entity, "title"):
                        reaction = self.get_group_reaction(group_id)
                        active_groups.append(
                            {
                                "id": group_id,
                                "title": entity.title,
                                "status": "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞",
                                "reaction": reaction
                            }
                        )
                    else:
                        active_groups.append(
                            {
                                "id": group_id,
                                "title": f"–ì—Ä—É–ø–ø–∞ {group_id}",
                                "status": "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                                "reaction": "‚Äî"
                            }
                        )
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ {group_id}: {e}"
                    )
                    active_groups.append(
                        {
                            "id": group_id,
                            "title": f"–ì—Ä—É–ø–ø–∞ {group_id}",
                            "status": "‚ùì –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞",
                            "reaction": "‚Äî"
                        }
                    )

            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            total_pages = (
                (len(active_groups) - 1) // self.page_size + 1 if active_groups else 1
            )
            page = max(0, min(page, total_pages - 1)) if total_pages > 0 else 0

            start_idx = page * self.page_size
            end_idx = min(start_idx + self.page_size, len(active_groups))
            current_groups = active_groups[start_idx:end_idx] if active_groups else []

            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏:\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for idx, group in enumerate(current_groups, 1):
                message += (
                    f"{idx}. üì¢ {group['title']} (ID: {group['id']})\n"
                    f"    –°—Ç–∞—Ç—É—Å: {group['status']}\n"
                    f"    –†–µ–∞–∫—Ü–∏—è: {group['reaction']}\n\n"
                )

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            buttons = []
            nav_buttons = []

            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            if page > 0:
                nav_buttons.append(Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", f"mon_page_{page-1}"))

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if total_pages > 1:
                page_info = f"üìÑ {page+1}/{total_pages}"
                nav_buttons.append(Button.inline(page_info, "dummy"))

            # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
            if page < total_pages - 1:
                nav_buttons.append(Button.inline("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", f"mon_page_{page+1}"))

            if nav_buttons:
                buttons.append(nav_buttons)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            buttons.append(
                [Button.inline("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", "check_availability")]
            )
            buttons.append([Button.inline("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")])

            if edit and hasattr(event, "edit") and callable(event.edit):
                try:
                    await event.edit(message, buttons=buttons)
                except:
                    await event.respond(message, buttons=buttons)
            else:
                await event.respond(message, buttons=buttons)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤: {e}")
            await event.respond(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤."
            )

    async def show_help(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
        help_text = """
üìå –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:

1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã
2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üîç –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø" –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ‚öôÔ∏è —Ä—è–¥–æ–º —Å –≥—Ä—É–ø–ø–æ–π, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∞–∫—Ü–∏—é
5Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üîç –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤
6Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–∞–º

‚ö°Ô∏è –ö–æ–≥–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω:
- –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–º–µ—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏–∏
- –ß–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è

üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏:
üëÄ –ì–ª–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
üëç –õ–∞–π–∫
‚ù§Ô∏è –°–µ—Ä–¥—Ü–µ
üî• –û–≥–æ–Ω—å
üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫
üòÅ –£–ª—ã–±–∫–∞
üòÆ –£–¥–∏–≤–ª–µ–Ω–∏–µ
üò¢ –ì—Ä—É—Å—Ç—å
ü§î –î—É–º–∞—é
üëé –î–∏–∑–ª–∞–π–∫

üí° –ï—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏–∏ –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å:
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –º–µ–Ω—é
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –æ—Å—Ç–∞–ª—Å—è –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª—É
- –í–æ–∑–º–æ–∂–Ω–æ, –≤ –≥—Ä—É–ø–ø–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã —Ä–µ–∞–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            """
        buttons = [[Button.inline("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")]]
        await event.respond(help_text, buttons=buttons)

    async def toggle_group_monitoring(self, event, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã"""
        try:
            group_id = data.split("_")[1]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è –ª–∏ –≥—Ä—É–ø–ø–∞
            is_monitoring, monitor_id = self.is_group_monitored(group_id)

            if is_monitoring:
                # –û—Ç–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                if monitor_id:
                    await self.stop_monitoring(monitor_id)
                    # –ü–æ–ª—É—á–∞–µ–º entity
                    entity = await self.get_entity_safely(group_id)

                    if entity and hasattr(entity, "title"):
                        await event.respond(
                            f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã '{entity.title}' –æ—Ç–∫–ª—é—á–µ–Ω"
                        )
                    else:
                        await event.respond(
                            f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã —Å ID {group_id} –æ—Ç–∫–ª—é—á–µ–Ω"
                        )

                    logger.info(f"–û—Ç–∫–ª—é—á–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã {monitor_id}")
            else:
                # –í–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                try:
                    # –ü–æ–ª—É—á–∞–µ–º entity
                    entity = await self.get_entity_safely(group_id)

                    if not entity:
                        await event.respond(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ —Å ID {group_id}."
                        )
                        logger.error(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}"
                        )
                        return

                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID –≥—Ä—É–ø–ø—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –µ–≥–æ
                    actual_group_id = str(entity.id)
                    normalized_id = self.normalize_group_id(actual_group_id)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    self.monitored_groups[normalized_id] = {
                        "enabled": True,
                        "reaction": "üëÄ"
                    }
                    self.save_settings()
                    logger.info(
                        f"–í–∫–ª—é—á–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã {normalized_id} (–∏—Å—Ö–æ–¥–Ω—ã–π ID: {actual_group_id})"
                    )

                    await event.respond(
                        f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã '{entity.title}' —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω!\n"
                        f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∏ "
                        f"—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é üëÄ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã.\n"
                        f"–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é, –Ω–∞–∂–∞–≤ ‚öôÔ∏è —Ä—è–¥–æ–º —Å –≥—Ä—É–ø–ø–æ–π."
                    )
                    logger.info(
                        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {normalized_id} –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
                    )

                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã {group_id}: {e}"
                    )
                    await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
            search = self.search_query.get(event.chat_id)
            page = 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await self.show_groups_list(event, page=page, search=search)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ toggle_group_monitoring: {e}")
            await event.respond("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def stop_monitoring(self, group_id):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ID
        is_monitored, monitor_id = self.is_group_monitored(group_id)
        
        if is_monitored and monitor_id in self.monitored_groups:
            del self.monitored_groups[monitor_id]
            self.save_settings()
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã {monitor_id}")
            return True
        return False

    async def ensure_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
                if not self.client.is_connected():
                    logger.warning("–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
                    await self.client.connect()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                if not await self.client.is_user_authorized():
                    logger.error("–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç –ø–æ—Ç–µ—Ä—è–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é!")

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    try:
                        if self.owner_id:
                            await self.bot.send_message(
                                self.owner_id,
                                "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç –ø–æ—Ç–µ—Ä—è–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.",
                            )
                    except Exception as notify_error:
                        logger.error(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ –ø–æ—Ç–µ—Ä–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {notify_error}"
                        )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
                if not self.bot.is_connected():
                    logger.warning("–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
                    await self.bot.connect()

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
            await asyncio.sleep(60)

    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def cleanup_processed_messages(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while True:
            try:
                if len(self.processed_messages) > 1000:
                    logger.info(
                        f"–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {len(self.processed_messages)}"
                    )
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000
                    sorted_messages = sorted(list(self.processed_messages))
                    self.processed_messages = set(sorted_messages[-1000:])
                    logger.info(f"–†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(self.processed_messages)}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

            # –û—á–∏—â–∞–µ–º —Ä–∞–∑ –≤ —á–∞—Å
            await asyncio.sleep(3600)

    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø
    async def periodic_group_validation(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø"""
        while True:
            try:
                logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø")
                await self.validate_monitored_groups()
                logger.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
            await asyncio.sleep(12 * 3600)


async def main():
    try:
        monitor = MessageMonitor()
        await monitor.start()

        if monitor.client and monitor.bot:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–æ–≤
            connection_check = asyncio.create_task(monitor.ensure_connection())
            cleanup_task = asyncio.create_task(monitor.cleanup_processed_messages())
            validation_task = asyncio.create_task(monitor.periodic_group_validation())

            # –î–µ—Ä–∂–∏–º –∫–ª–∏–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–º–∏
            await asyncio.gather(
                monitor.client.run_until_disconnected(),
                monitor.bot.run_until_disconnected(),
            )

            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            connection_check.cancel()
            cleanup_task.cancel()
            validation_task.cancel()
        else:
            logger.error(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
            )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {str(e)}")


if __name__ == "__main__":
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
        handler = logging.FileHandler("bot.log")
        handler.setFormatter(
            logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
        )
        logger.addHandler(handler)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        from logging.handlers import TimedRotatingFileHandler

        file_handler = TimedRotatingFileHandler(
            "bot.log", when="midnight", interval=1, backupCount=7
        )
        file_handler.setFormatter(
            logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
        )
        logger.addHandler(file_handler)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        def handle_exception(exc_type, exc_value, exc_traceback):
            if issubclass(exc_type, KeyboardInterrupt):
                sys.__excepthook__(exc_type, exc_value, exc_traceback)
                return
            logger.critical(
                "–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:",
                exc_info=(exc_type, exc_value, exc_traceback),
            )

        import sys

        sys.excepthook = handle_exception

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
